package usothreads;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class UsoThreads {

	public static void main(String[] args) {

		JFrame marco = new MarcoRebote();
		marco.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		marco.setVisible(true);
	}

}

class PelotaHilos implements Runnable {
	private Pelota pelota;
	private Component componente;

	public PelotaHilos(Pelota unaPelota, Component unComponente) {

		pelota = unaPelota;
		componente = unComponente;
	}

	public void run() {

		System.out.println(Thread.currentThread().isInterrupted());
//		for (int i = 1; i <= 3000; i++) {
//		while(!Thread.interrupted()) {
		while (!Thread.currentThread().isInterrupted()) {

			pelota.muevePelota(componente.getBounds());
			componente.paint(componente.getGraphics());
			try {

				Thread.sleep(4);
			} catch (InterruptedException e) {

//				e.printStackTrace();
//				System.exit(0);
//				System.out.println("Hilo bloquedo. Imposible su interrupciÃ³n");
				Thread.currentThread().interrupt();
			}
		}
		System.out.println(Thread.currentThread().isInterrupted());
	}
}

class Pelota {
	private static final int TAMX = 15, TAMY = 15;
	private double x = 0, y = 0, dx = 1, dy = 1;

	public void muevePelota(Rectangle2D limites) {

		x += dx;
		y += dy;
		if (x < limites.getMinX()) {

			x = limites.getMinX();
			dx = -dx;
		}
		if (x + TAMX >= limites.getMaxX()) {

			x = limites.getMaxX() - TAMX;
			dx = -dx;
		}
		if (y < limites.getMinY()) {

			y = limites.getMinY();
			dy = -dy;
		}
		if (y + TAMY >= limites.getMaxY()) {

			y = limites.getMaxY() - TAMY;
			dy = -dy;
		}
	}

	public Ellipse2D getShape() {

		return new Ellipse2D.Double(x, y, TAMX, TAMY);
	}
}

class LaminaPelota extends JPanel {
	private ArrayList<Pelota> pelotas = new ArrayList<Pelota>();

	public void add(Pelota b) {

		pelotas.add(b);
	}

	public void paintComponent(Graphics g) {

		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		for (Pelota b : pelotas) {

			g2.fill(b.getShape());
		}
	}
}

class MarcoRebote extends JFrame {
	private LaminaPelota lamina;
	private Thread t1, t2, t3;
	private JButton arranca1, arranca2, arranca3, detener1, detener2, detener3;

	public MarcoRebote() {

		setBounds(600, 300, 600, 350);
		setTitle("Rebotes");
		lamina = new LaminaPelota();
		add(lamina, BorderLayout.CENTER);
		JPanel laminaBotones = new JPanel();

		arranca1=new JButton("Hilo1");
		arranca1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {

				comienza_el_juego();
			}
		});
		laminaBotones.add(arranca1);
		arranca2=new JButton("Hilo2");
		arranca2.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				
				comienza_el_juego();
			}
		});
		laminaBotones.add(arranca2);
		arranca3=new JButton("Hilo3");
		arranca3.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				
				comienza_el_juego();
			}
		});
		laminaBotones.add(arranca3);
		detener1=new JButton("detener1");
		detener1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				
				detener();
			}
		});
		laminaBotones.add(detener1);
		detener2=new JButton("detener2");
		detener2.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				
				detener();
			}
		});
		laminaBotones.add(detener2);
		detener3=new JButton("detener3");
		detener3.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				
				detener();
			}
		});
		laminaBotones.add(detener3);
		add(laminaBotones, BorderLayout.SOUTH);
	}

	public void comienza_el_juego(ActionEvent e) {

		Pelota pelota = new Pelota();
		lamina.add(pelota);
		Runnable r = new PelotaHilos(pelota, lamina);
//		Thread t = new Thread(r);
		if (e.getSource()==) {
			
		}
		t1 = new Thread(r);
		t1.start();
		t2 = new Thread(r);
		t2.start();
		t3 = new Thread(r);
		t3.start();
	}

	public void detener() {

//		t.stop();
		t1.interrupt();
		t2.interrupt();
		t3.interrupt();
	}
}
