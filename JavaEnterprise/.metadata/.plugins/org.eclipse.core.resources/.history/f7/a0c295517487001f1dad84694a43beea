
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JPanel;

public class LIenzoDibujo extends JPanel implements MouseListener, MouseMotionListener {
	private int x1 = 0, x2 = 0, x, y, width = 300, height = 200;
	boolean pintar, r, l, t, b;
	Rectangle2D linea, linea1, linea2, linea3, linea4;
	ArrayList<Rectangle2D> lista = new ArrayList<Rectangle2D>();

	public LIenzoDibujo() {
		setPreferredSize(new Dimension(500, 500));
		setBackground(Color.yellow);

		addMouseListener(this);
		addMouseMotionListener(this);
	}

	@Override
	protected void paintComponent(Graphics g) {

		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		Redimencionar();

		if (l || t) {

			linea = new Rectangle2D.Double(150, 150, width, height);
		} else {
			linea = new Rectangle2D.Double(150, 150, width, height);

		}

		linea1 = new Rectangle2D.Double(linea.getCenterX() - 15, linea.getY() - 10, 30, 20);
		linea2 = new Rectangle2D.Double(linea.getMaxX() - 10, linea.getCenterY() - 15, 20, 30);
		linea3 = new Rectangle2D.Double(linea.getCenterX() - 15, linea.getMaxY() - 10, 30, 20);
		linea4 = new Rectangle2D.Double(linea.getX() - 10, linea.getCenterY() - 15, 20, 30);
		if (pintar) {

			g2.draw(linea1);
			g2.draw(linea2);
			g2.draw(linea3);
			g2.draw(linea4);
			g2.setColor(Color.red);
		} else {
			g2.setColor(Color.black);
		}
		g2.draw(linea);

	}

	public void Redimencionar() {
		if (c > 0 && r||l) {

			width += dx;
		} else if (c > 0 && b||) {

			height += dy;

		} 
	}

	@Override
	public void mouseClicked(MouseEvent e) {

	}

	@Override
	public void mousePressed(MouseEvent e) {
		lastX = e.getX();
		lastY = e.getY();
		if (linea.contains(e.getX(), e.getY()) || ChecarTodos(e.getX(), e.getY())) {

			pintar = true;
		} else {
			pintar = false;
		}
		repaint();
	}

	public boolean ChecarTodos(int x, int y) {

		return linea1.contains(x, y) || linea2.contains(x, y) || linea3.contains(x, y) || linea4.contains(x, y);
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		lastX = -1;
		lastY = -1;
	}

	@Override
	public void mouseEntered(MouseEvent e) {

	}

	@Override
	public void mouseExited(MouseEvent e) {

	}

	int c = 0, dx, dy, lastX = -1, lastY = -1;

	@Override
	public void mouseDragged(MouseEvent e) {
		int currentX = e.getX();
		int currentY = e.getY();

		if (lastX != -1 && lastY != -1) {
			dx = currentX - lastX;
			dy = currentY - lastY;
		}
		lastX = currentX;
		lastY = currentY;
		c++;

		if (linea2.contains(e.getX(), e.getY())) {

			r = true;
			l = false;
			b = false;
			t = false;
		} else if (linea3.contains(e.getX(), e.getY())) {

			r = false;
			l = false;
			b = true;
			t = false;
		} else if (linea4.contains(e.getX(), e.getY())) {

			r = false;
			l = true;
			b = false;
			t = false;
		} else if (linea1.contains(e.getX(), e.getY())) {

			r = false;
			l = false;
			b = false;
			t = true;
		} else {
			r = false;
			l = false;
			b = false;
			t = false;

		}

		repaint();
	}

	@Override
	public void mouseMoved(MouseEvent e) {

	}
}
